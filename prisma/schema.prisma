generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Gamification
  xp          Int      @default(0)
  level       Int      @default(1)
  totalXp     Int      @default(0)
  currentStreak Int    @default(0)
  longestStreak BigInt @default(0)
  lastActiveDate DateTime?
  
  // Settings
  theme       String   @default("light")
  notifications Boolean @default(true)
  focusSettings Json?
  
  // Relations
  missions    Mission[]
  achievements UserAchievement[]
  jobApplications JobApplication[]
  notebookEntries NotebookEntry[]
  learningProgress LearningProgress[]
  dailyChallenges DailyChallengeProgress[]
  
  @@map("users")
}

model Mission {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        MissionType
  duration    Int?     // in minutes
  xpReward    Int      @default(10)
  status      MissionStatus @default(PENDING)
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Focus mission specific
  blockedApps String?  // JSON array of app names
  blockedWebsites String? // JSON array of URLs
  
  @@map("missions")
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  category    AchievementCategory
  requirement String   // JSON describing requirement
  xpReward    Int      @default(50)
  createdAt   DateTime @default(now())
  
  userAchievements UserAchievement[]
  
  @@map("achievements")
}

model UserAchievement {
  id          String   @id @default(cuid())
  unlockedAt  DateTime @default(now())
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  achievementId String
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model JobApplication {
  id          String   @id @default(cuid())
  company     String
  role        String
  description String?
  appliedDate DateTime @default(now())
  status      ApplicationStatus @default(APPLIED)
  notes       String?
  nextAction  String?
  salary      String?
  location    String?
  jobUrl      String?
  
  // File attachments
  resumeUrl   String?
  coverLetterUrl String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("job_applications")
}

model NotebookEntry {
  id        String   @id @default(cuid())
  title     String?
  content   String
  tags      String?  // JSON array of tags
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notebook_entries")
}

model LearningResource {
  id          String   @id @default(cuid())
  title       String
  description String?
  url         String
  type        ResourceType
  difficulty  DifficultyLevel @default(BEGINNER)
  estimatedTime Int?   // in minutes
  tags        String? // JSON array of tags
  source      String? // Platform name (Medium, Dev.to, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  learningProgress LearningProgress[]
  
  @@map("learning_resources")
}

model LearningProgress {
  id          String   @id @default(cuid())
  status      ProgressStatus @default(NOT_STARTED)
  startedAt   DateTime?
  completedAt DateTime?
  timeSpent   Int?     // in minutes
  notes       String?
  rating      Int?     // 1-5 stars
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  resourceId  String
  resource    LearningResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, resourceId])
  @@map("learning_progress")
}

model DailyChallenge {
  id          String   @id @default(cuid())
  title       String
  description String
  type        ChallengeType
  requirement String   // JSON describing requirement
  xpReward    Int      @default(25)
  date        DateTime @unique
  createdAt   DateTime @default(now())
  
  progress    DailyChallengeProgress[]
  
  @@map("daily_challenges")
}

model DailyChallengeProgress {
  id          String   @id @default(cuid())
  status      ProgressStatus @default(NOT_STARTED)
  progress    Int      @default(0) // 0-100 percentage
  completedAt DateTime?
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  challengeId String
  challenge   DailyChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, challengeId])
  @@map("daily_challenge_progress")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  read      Boolean  @default(false)
  actionUrl String?
  createdAt DateTime @default(now())
  
  userId    String
  
  @@map("notifications")
}

// Enums
enum MissionType {
  FOCUS
  LEARNING
  JOB_SEARCH
  CUSTOM
}

enum MissionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum AchievementCategory {
  FOCUS
  LEARNING
  JOB_SEARCH
  STREAK
  XP
  SOCIAL
}

enum ApplicationStatus {
  APPLIED
  SCREENING
  INTERVIEW
  OFFER
  REJECTED
  WITHDRAWN
}

enum ResourceType {
  ARTICLE
  VIDEO
  TUTORIAL
  COURSE
  BOOK
  PODCAST
  PROJECT
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum ChallengeType {
  FOCUS
  LEARNING
  JOB_APPLICATION
  STREAK
  XP
}

enum NotificationType {
  MISSION_REMINDER
  ACHIEVEMENT_UNLOCKED
  DAILY_CHALLENGE
  JOB_APPLICATION_FOLLOWUP
  LEARNING_SUGGESTION
  STREAK_WARNING
}